using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using Photon.Pun;
using Photon.Realtime;

public class LobbyManager : MonoBehaviourPunCallbacks
{
    public Text nickName;
    
    //추후 변경해야함 테스트용임

    //방이름 InputField
    InputField inputRoomName;
    //비밀번호 InputField
    InputField inputPassword;
    //총인원 InputField
    InputField inputMaxPlayer;
    //방참가 Button
    Button btnJoin;
    //방생성 Button
    Button btnCreate;

    //방의 정보들   
    Dictionary<string, RoomInfo> roomCache = new Dictionary<string, RoomInfo>();
    //룸 리스트 Content
    Transform trListContent;

    //map Thumbnail
    GameObject[] mapThumbs;

    void Start()
    {
        // 방이름(InputField)이 변경될때 호출되는 함수 등록
        //inputRoomName.onValueChanged.AddListener(OnRoomNameValueChanged);
        // 총인원(InputField)이 변경될때 호출되는 함수 등록
        //inputMaxPlayer.onValueChanged.AddListener(OnMaxPlayerValueChanged);

        //커스텀 창에 닉네임 뜰 수 있게 설정
        // nickName.text = PhotonNetwork.NickName;

    }

    public void OnRoomNameValueChanged(string s)
    {
        //참가
        btnJoin.interactable = s.Length > 0;
        //생성
        btnCreate.interactable = s.Length > 0 && inputMaxPlayer.text.Length > 0;
    }

    public void OnMaxPlayerValueChanged(string s)
    {
        //생성
        btnCreate.interactable = s.Length > 0 && inputRoomName.text.Length > 0;
    }


    //방 생성
    public void CreateRoom()
    {
        // 방 옵션을 설정
        RoomOptions roomOptions = new RoomOptions();
        // 최대 인원 (0이면 최대인원)
        //roomOptions.MaxPlayers = byte.Parse(inputMaxPlayer.text);
        roomOptions.MaxPlayers = 10;
        // 룸 리스트에 보이지 않게? 보이게?
        roomOptions.IsVisible = true;

        // 방 생성 요청 (해당 옵션을 이용해서)
        //PhotonNetwork.CreateRoom(inputRoomName.text + inputPassword.text, roomOptions);
        PhotonNetwork.CreateRoom("XR_LHS", roomOptions, TypedLobby.Default);
    }

    //방이 생성되면 호출 되는 함수
    public override void OnCreatedRoom()
    {
        base.OnCreatedRoom();
        print("OnCreatedRoom");
    }

    //방 생성이 실패 될때 호출 되는 함수
    public override void OnCreateRoomFailed(short returnCode, string message)
    {
        base.OnCreateRoomFailed(returnCode, message);
        print("OnCreateRoomFailed , " + returnCode + ", " + message);

        JoinRoom();
    }

    //방 참가 요청
    public void JoinRoom()
    {

        PhotonNetwork.JoinRoom("XR_LHS");
    }

    //방 참가가 완료 되었을 때 호출 되는 함수
    public override void OnJoinedRoom()
    {
        base.OnJoinedRoom();
        print("OnJoinedRoom");

        

        if(LobbyUIManager.instance.flag == "re")
        {
            PhotonNetwork.LoadLevel("RoomBaseScene");
        }
        else if(LobbyUIManager.instance.flag == "kks")
        {
            PhotonNetwork.LoadLevel("KKSRoomScene");
        }
        else
        {
            PhotonNetwork.LoadLevel("RoomBaseScene");
        }


    }

    //방 참가가 실패 되었을 때 호출 되는 함수
    public override void OnJoinRoomFailed(short returnCode, string message)
    {
        base.OnJoinRoomFailed(returnCode, message);
        print("OnJoinRoomFailed, " + returnCode + ", " + message);
    }

    //=================
    //방 생성
    public void CreateRoomKKS()
    {
        // 방 옵션을 설정
        RoomOptions roomOptions = new RoomOptions();
        // 최대 인원 (0이면 최대인원)
        //roomOptions.MaxPlayers = byte.Parse(inputMaxPlayer.text);
        roomOptions.MaxPlayers = 10;
        // 룸 리스트에 보이지 않게? 보이게?
        roomOptions.IsVisible = true;

        // 방 생성 요청 (해당 옵션을 이용해서)
        //PhotonNetwork.CreateRoom(inputRoomName.text + inputPassword.text, roomOptions);
        PhotonNetwork.CreateRoom("XR_LHS", roomOptions, TypedLobby.Default);
        //PhotonNetwork.CreateRoom("KKSRoomScene", roomOptions, TypedLobby.Default);

    }


    //=================
    //방에 대한 정보가 변경되면 호출 되는 함수(추가/삭제/수정)
    public override void OnRoomListUpdate(List<RoomInfo> roomList)
    {
        base.OnRoomListUpdate(roomList);

        //룸리스트 UI 를 전체삭제
       // DeleteRoomListUI();
        //룸리스트 정보를 업데이트
        //UpdateRoomCache(roomList);
        //룸리스트 UI 전체 생성 -> 주석처리함
        //CreateRoomListUI();
    }

    void DeleteRoomListUI()
    {
        foreach (Transform tr in trListContent)
        {
            Destroy(tr.gameObject);
        }
    }

    void UpdateRoomCache(List<RoomInfo> roomList)
    {

        for (int i = 0; i < roomList.Count; i++)
        {
            // 수정, 삭제
            if (roomCache.ContainsKey(roomList[i].Name))
            {
                //만약에 해당 룸이 삭제된것이라면
                if (roomList[i].RemovedFromList)
                {
                    //roomCache 에서 해당 정보를 삭제
                    roomCache.Remove(roomList[i].Name);
                }
                //그렇지 않다면
                else
                {
                    //정보 수정
                    roomCache[roomList[i].Name] = roomList[i];
                }
            }
            //추가
            else
            {
                roomCache[roomList[i].Name] = roomList[i];
            }
        }

        //for (int i = 0; i < roomList.Count; i++)
        //{
        //    // 수정, 삭제
        //    if (roomCache.ContainsKey(roomList[i].Name))
        //    {
        //        //만약에 해당 룸이 삭제된것이라면
        //        if (roomList[i].RemovedFromList)
        //        {
        //            //roomCache 에서 해당 정보를 삭제
        //            roomCache.Remove(roomList[i].Name);
        //            continue;
        //        }                
        //    }
        //    roomCache[roomList[i].Name] = roomList[i];            
        //}
    }

    GameObject roomItemFactory;
    //void CreateRoomListUI()
    //{
    //    foreach (RoomInfo info in roomCache.Values)
    //    {
    //        //룸아이템 만든다.
    //        GameObject go = Instantiate(roomItemFactory, trListContent);
    //        //룸아이템 정보를 셋팅(방제목(0/0))
    //        RoomItem item = go.GetComponent<RoomItem>();
    //        item.SetInfo(info);

    //        //roomItem 버튼이 클릭되면 호출되는 함수 등록
    //        item.onClickAction = SetRoomName;
    //        //람다식
    //        //item.onClickAction = (string room) => {
    //        //    inputRoomName.text = room;
    //        //};

    //        string desc = (string)info.CustomProperties["desc"];
    //        int map_id = (int)info.CustomProperties["map_id"];
    //        print(desc + ", " + map_id);
    //    }
    //}


    //이전 Thumbnail id
    int prevMapId = -1;
    void SetRoomName(string room, int map_id)
    {
        //룸이름 설정
        inputRoomName.text = room;

        //만약에 이전 맵 Thumbnail이 활성화가 되어있다면
        if (prevMapId > -1)
        {
            //이전 맵 Thumbnail을 비활성화
            mapThumbs[prevMapId].SetActive(false);
        }

        //맵 Thumbnail 설정
        mapThumbs[map_id].SetActive(true);

        //이전 맵 id 저장
        prevMapId = map_id;
    }
}
